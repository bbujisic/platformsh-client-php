<?php

namespace Platformsh\Client\Tests\Model;


use Platformsh\Client\Tests\PlatformshTestBase;
use Platformsh\Client\Model\SshKey;

class SshKeyTest extends PlatformshTestBase
{

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->sshKeys = $this->client->getSshKeys();
    }


    /**
     * @covers \Platformsh\Client\PlatformClient::getSshKeys()
     */
    public function testSshKeysLoad()
    {
        $this->assertEquals(2, count($this->sshKeys), 'Two SSH keys extracted from account info');
        $this->assertInstanceOf(SshKey::class, $this->sshKeys[0], 'SSH keys are instances of the SshKey class');
    }

    /**
     * @covers \Platformsh\Client\Model\SshKey::validatePublicKey()
     */
    public function testSshKeyValidation()
    {
        $this->assertFalse(SshKey::validatePublicKey($this->sshKeys[0]->value), 'Invalid key failed the validation');
        $this->assertTrue(SshKey::validatePublicKey($this->sshKeys[1]->value), 'Valid key passed the validation');
    }

    /**
     * @covers \Platformsh\Client\PlatformClient::getSshKey()
     * @covers \Platformsh\Client\Model\SshKey::get()
     *
     */
    public function testSshKeyLoad()
    {
        $sshKey = $this->client->getSshKey(1);
        $this->assertEquals('aaabbb', $sshKey->fingerprint, 'A key successfully loaded from the Accounts API');
    }

    /**
     * @covers \Platformsh\Client\PlatformClient::addSshKey()
     * @covers \Platformsh\Client\Model\SshKey::create()
     * @covers \Platformsh\Client\Model\SshKey::validatePublicKey()
     *
     */
    public function testUnsuccessfulSshKeyCreation()
    {
        $this->expectException(\InvalidArgumentException::class);
        $this->client->addSshKey('invalid_key');
    }

    // @todo: public function testSuccessfulSshKeyCreation() {}
    // @todo: public function testUpdateSshKey() {}
    // @todo: public function testDeleteSshKey() {}

}



